//packing/unpacking functions

ps_4_0 float Pack4UByteToFloat(half4 x){
	uint uValue;
	uValue = ((uint)(x.x * 255.0 + 0.5)); // goes from bit 0 to 15
	uValue |= ((uint)(x.y * 255.0 + 0.5)) << 8;
	uValue |= ((uint)(x.z * 255.0 + 0.5)) << 16; // goes from bit 0 to 15
	uValue |= ((uint)(x.w * 254.0 + 1.5)) << 24;
	return (float)(uValue);
}
fp30 float Pack4UByteToFloat(half4 x){
	return pack_4ubyte(x);
}

ps_4_0 float Pack2HalfToFloat(half2 x){
	return intBitsToFloat((floatToRawIntBits(x.x)&0xFFFF) | (floatToRawIntBits(x.y)&0xFFFF << 16));
}
fp30 float Pack2HalfToFloat(half2 x){
	return pack_2half(x);
}
/*ps_3_0 float4 packData(float3 position, float3 normal, float3 flux, float depth){
	float normal_comp = 
	return float4(0);
}*/

float4 packData(float3 position, float3 normal, float3 flux, float depth){
	float norm_flux;
	//norm_flux = 
	return float4(
		depth,//flux.rg,1.0,
		//store x
		normal.x,
		//store y and z's sign
		normal.y + 2*(normal.z>0),
		trunc(flux.r*255)*255+trunc(flux.g*255)+flux.b
		);
}
void ShadowCasterVP(
    float4 iPosition : POSITION,
    float3 iNormal   : NORMAL,
	float2 iTexcoord :TEXCOORD0,
    out float4 oPosition : POSITION,
    out float3 oViewPos : TEXCOORD0,
    out float3 oNormal  :TEXCOORD1,
	out float3 oWorldPos:TEXCOORD2,
	out float3 oProjPos:TEXCOORD3,
	out float2 texcoord:TEXCOORD4,
    uniform float4x4 cWorldViewProj,
    uniform float4x4 cWorldView,
	uniform float4x4 cWorldMatrix
    )
{
    oPosition = mul(cWorldViewProj, iPosition);
    oViewPos = mul(cWorldView, iPosition).xyz;
	oNormal   =  mul(cWorldMatrix,float4(iNormal,0)).xyz;
	oWorldPos = mul(cWorldMatrix,iPosition).xyz;
	float4 prPos = mul(cWorldViewProj, iPosition);
	prPos.xyz/= prPos.w;
	oProjPos = prPos.xyz;
	texcoord = iTexcoord;
}


float4 ShadowCasterFP(
	uniform float3 spotParams,
    float3 iViewPos : TEXCOORD0,   //This is the position in the light's space
	float3 iNormal  : TEXCOORD1,
	float3 iWorldPos: TEXCOORD2,
	//float3 iLightPos: TEXCOORD3,    
	float3 projPos  : TEXCOORD3,
	float2 texcoord : TEXCOORD4,
	uniform sampler2D diffuse : register(s0)
	
    ) : COLOR
{
	
	float depth = projPos.z;//length(iViewPos) / cFarDistance;
	iNormal = normalize(iNormal);
	half3 flux;
#ifdef DIRECTIONAL
    flux = tex2D(diffuse,texcoord);
#else
//#ifdef SPOT
	//half spotlightAngle = saturate(dot(float3(0,0,1), iViewPos));
	//half spotFalloff = saturate((spotlightAngle - spotParams.x) / (spotParams.y - spotParams.x));
	//flux = cLightColor;//float3(1-spotFalloff);
	//flux.b = 1;
#endif
	
//#endif
	
	return packData(iWorldPos, iNormal, flux, depth);
	
	
}
